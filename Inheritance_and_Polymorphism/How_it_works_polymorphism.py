# Полиморфизм – это возможность работы с совершенно разными объектами (языка Python) единым образом.


# get_pr() - единый интерфейс для определения периметра разных фигур
# если мы забудем в каком-либо классе определить метод get_pr(), то программа приведет к ошибке.
# нужно определить базовый класс для классов геометрических примитивов и в нем прописать реализацию
# get_pr(). А все остальные классы унаследовать от него. И если в каком-либо дочернем классе
# не будет определен метод get_pr(), то вызовется метод базового класса и выдаст ошибку
# NotImplementedError, которая будет сигнализировать о том, что метод не переопределен.
# В языках программирования методы, которые обязательно нужно переопределять в дочерних классах
# и которые не имеют своей собственной реализации называют абстрактными.
# Конечно, в языке Python нет чисто абстрактных методов.
# Здесь мы лишь выполнили имитацию их поведения, заставляя программиста определять
# геттер get_pr() в дочерних классах, самостоятельно генерируя исключение NotImplementedError.


class Geom:
    def get_pr(self):
        raise NotImplementedError("В дочернем классе должен быть переопределен метод get_pr()")


class Rectangle(Geom):
    def __init__(self, w, h):
        self.w = w
        self.h = h

    def get_pr(self):
        return 2 * (self.w + self.h)


class Square(Geom):
    def __init__(self, a):
        self.a = a

    def get_pr(self):
        return 4 * self.a


class Triangle(Geom):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def get_pr(self):
        return self.a + self.b + self.c


geom = [Rectangle(1, 2), Rectangle(3, 4),
        Square(10), Square(20),
        Triangle(1, 2, 3), Triangle(4, 5, 6)
        ]

for g in geom:
    print(g.get_pr())
