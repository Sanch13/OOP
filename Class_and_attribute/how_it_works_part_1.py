class Point:     # Создается класс Point
    color = "Red"     # Создается атрибут класса color с знач. "Red" класса Point
    circle = 2        # Создается атрибут класса circle с знач. 2 класса Point


a = Point()     # Создается экземпляр a класса Point
b = Point()     # Создается экземпляр b класса Point
# print(id(a.color) == id(b.color), a.color, b.color)  # True Red Red. Ссылаються на атрибут color класса Point
# Point.color = 'Grey'  # Изменяем атрибут color класса Point
#
# print(id(a.color) == id(b.color), a.color, b.color)  # True Grey Grey. Атрибут color класса Point изменен на Grey
# b.color = 'Green'  # Изменяем локальное свойство color экземпляра b класса Point
#
# print(Point.__dict__)  # {'color': 'Grey', 'circle': 2 and other param}
# print(id(a.color) == id(b.color), a.color, b.color)  # False Grey Green. a ссылается на на атрибут color класса Point
#                                                      # b ссылается на локальное свойство color экземпляра b класса Point
# setattr(obj, name, value)  # устанавливаем/перезаписываем значение value атрибуту name из
# пространства  имен obj
# getattr(obj, name, False)  #  читаем значение из name, если name нет вернется False
# del Point.color  # удалить атрибут color из класса Point, если его нет то выдаст ошибку
# delattr(obj, name)  # удалить атрибут name из пространства obj, если его нет то выдаст ошибку

#########################################################################################
class Goods:     # Создается класс Goods
    title = "Мороженое"  # Создается атрибут класса title с знач. "Мороженое" класса Goods
    weight = 154         # Аналогичное создание. смотри выше
    tp = "Еда"          # Аналогичное создание. смотри выше
    price = 1024         # Аналогичное создание. смотри выше
# setattr(Goods, "price", 2048)   # Переменной price класса Goods присваеваем (ссылается на) знач. 2048. 1 - вариант
# Goods.price = 2048   # Переменной price класса Goods присваеваем (ссылается на) знач. 2048. 2 - вариант
# setattr(Goods, "inflation", 100)  # Переменной inflation класса Goods присваеваем (ссылается на) знач. 100. 1 - вариант
# Goods.inflation = 100  # Переменной inflation класса Goods присваеваем (ссылается на) знач. 100. 2 - вариант
# print(Goods.__dict__) # Вывод всех переменных класса Goods в виде словаря
#########################################################################################
class Notes:     # Создается класс Notes
    uid = 1005435           # Создается атрибут класса uid с знач. "1005435" класса Notes
    title = "Шутка"         # Аналогичное создание. смотри выше
    author = "И.С. Бах"     # Аналогичное создание. смотри выше
    pages = 2               # Аналогичное создание. смотри выше

# print(getattr(Notes, "author")) # Получение значения author из класса Notes
#########################################################################################
class TravelBlog:     # Создается класс TravelBlog
    total_blogs = 0   # Создается атрибут класса total_blogs с знач. 0 класса TravelBlog


tb1 = TravelBlog()     # Создается экземпляр tb1 класса TravelBlog
tb1.name = "Франция"   # В экземпляре tb1 класса TravelBlog создаем лок. св-во name и присваеваем
                       # (ссылается на) знач. "Франция". tb1={'name': 'Франция'}
tb1.days = 6           # В экземпляре tb1 класса TravelBlog создаем лок. св-во days и присваеваем
                       # (ссылается на) знач. 6. tb1={'days': 6}
TravelBlog.total_blogs += 1     # Увеличиваем атрибут класса total_blogs на 1. total_blogs = 1
tb2 = TravelBlog()     # Создается экземпляр tb2 класса TravelBlog
tb2.name = "Италия"    # В экземпляре tb2 класса TravelBlog создаем лок. св-во name и присваеваем
                       # (ссылается на) знач. "Италия". tb2={'name': 'Италия'}
tb2.days = 5           # В экземпляре tb2 класса TravelBlog создаем лок. св-во days и присваеваем
                       # (ссылается на) знач. 5. tb2={'days': 5}
TravelBlog.total_blogs += 1     # Увеличиваем атрибут класса total_blogs на 1. total_blogs = 2
# print(tb1.__dict__, tb2.__dict__, TravelBlog.total_blogs)     # Вывод на экран содержимого в экз. tb1 и tb2, а также
# атрибут класса total_blogs. {'name': 'Франция', 'days': 6} {'name': 'Италия', 'days': 5} 2
#########################################################################################
class Figure:     # Создается класс Figure
    type_fig = 'ellipse'   # Создается атрибут класса type_fig с знач. 'ellipse' класса Figure
    color = 'red'          # Создается атрибут класса color с знач. 'red' класса Figure


fig1 = Figure()             # Создается экземпляр fig1 класса Figure
fig1.start_pt = (10, 5)   # В экземпляре fig1 класса Figure создаем лок. св-во start_pt и присваеваем
                          # (ссылается на) знач. (10, 5). fig1={'start_pt': (10, 5)}
fig1.end_pt = (100, 20)   # В экземпляре fig1 класса Figure создаем лок. св-во end_pt и присваеваем
                          # (ссылается на) знач. (100, 20). fig1={'start_pt': (10, 5), 'end_pt': (100, 20)}
fig1.color = 'blue'   # В экземпляре fig1 класса Figure создаем лок. св-во color и присваеваем
                      # (ссылается на) знач. 'blue'. fig1={'start_pt': (10, 5), 'end_pt': (100, 20), 'color': 'blue'}
delattr(fig1, 'color')# В экземпляре fig1 класса Figure удаляем лок. св-во color (ссылается на)
                      # знач. 'blue'. fig1={'start_pt': (10, 5), 'end_pt': (100, 20)}
# for key in fig1.__dict__:           # Перебираем коллекцию экз. fig1 класса Figure по ключам
#     print(key, end=' ')             # Вывод на экран ключей коллекции экз. fig1.  start_pt end_pt
#########################################################################################
class Person:     # Создается класс Person
    name = 'Сергей Балакирев'   # Атрибуту name класса Person присваеваем (ссылается на) знач. 'Сергей Балакирев'.
    job = 'Программист'         # Атрибуту job класса Person присваеваем (ссылается на) знач. 'Программист' .
    city = 'Москва'             # Атрибуту city класса Person присваеваем (ссылается на) знач. 'Москва'.


p1 = Person()     # Создается экземпляр p1 класса Person
print(True if p1.__dict__.get("job") else False)     # Вывод на экран. Обращаемся к коллекции локальных свойств
# p1.__dict__ и пытаемся получить значение по ключу "job". Так как коллекция пуста {}, получаем на экран False.
print('job' in p1.__dict__)     # Вывод на экран. Проверяем входит ли ключ 'job' в коллекцию
#  локальных свойств p1.__dict__. Так как коллекция пуста p1.__dict__={}, получаем на экран False.
